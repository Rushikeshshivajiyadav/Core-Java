Regular Expression -
		
		1) if we want to represent a group of String according to particular pattern then we should go for Regular Expression
		
			eg -
				1) we can write a Regular Expression to represent all valid mobile numbers
				2) we can wirte a Regular Expression to represent All mail ids
				
		2) the main important application areas of Regular Expressions are 
		
			1) to develop validation frameworks
			2) to develop pattern matching applications (Ctrl + f in windows, grep command in Unix)
			3) to develop translators like Assemler, compiler, interpreter
			4) to develop digital circuit 
			5) to develop communication protocol like TCP/IP, UDP etc
			
		
		Example -
		
				import java.util.regex.*;
				
				class RegExpDemo
				{
					public static void main(String[] args)
					{
						int count = 0;
						
						Pattern p = Pattern.compiler("ab");
						Matcher m = p.matcher("abbabbba");
						while(m.find())
						{
							++count;
							System.out.println(m.start()+ " "+ m.end()+ " "+ m.group());
						}
						
						System.out.println("the total number of occurrence :" + count);
					}
				}
			
				output -
			
						javac RegExpDemo.java
						java RegExpDemo
						0	2	ab
						3	5	ab
						the total number of occurrence : 2
					
					
		3) Pattern -
					
			1) a Pattern Object is a compile version of Regular Expression that is it is a java equivalent Object of Pattern
			2) we can create Pattern Object by using compile() method of Pattern class 
					
					public static Pattern compile(String re);
					
				eg -
					Pattern p = Pattern.compiler("ab");
					
					
					
					
		4) Matcher -
			
			1) we can use Matcher Object to check the given Pattern in the target String 
			2) we can create a Matcher Object by using matcher() method of Pattern class
				
					public Matcher matcher(String target);
					
				eg -
					Matcher m = p.matcher("abbabbba");
					
					
					
		5) important methods of Matcher class -
			
				boolean find() -
						it attempt to find next match and returns ture if it is available
						
				int start() -
						return start index of the match
						
				int end() -
						returns end + 1 index of the match
						
				String group() -
						it returns the matched pattern
						
						
	Note - Pattern and Matcher classes present in java.util.regex package and introduced in 1.4 version				
					
					
					
					
					
------------------------------------------------------------------------------------------------------------------------------------------------------------------

character classes -
						
		[abc]  - 	either a, b or c
		
		[^abc] -	except a, b and c 
		
		[a-z]  -	any lowercase alphabet symbol from a to z
		
		[A-Z]  -	any uppercase alphabet symbol from A to Z
		
		[a-zA-Z]  -	any alphabet symbol
		
		[0-9]	-	and digit from 0-9
		
		[0-9a-zA-Z]  -	any alphabetnumeric symbol
		
		[^0-9a-zA-Z]  -	except alphabetnumeric characters is nathing but special symbol
					
					
					
		Example -
			
						Pattern p = Pattern.compiler("x");
						Matcher m = p.matcher("a3b#k@9z");
						while(m.find())
						{
							System.out.println(m.start()+" "+ m.group());
						}
					
					
					
					
			X = [abc]		X = [^abc]		x = [a-z]		x = [0-9]		x = [a-zA-Z0-9]		x = [^a-zA-Z0-9]
			
			0	a			1	3			0	a 			1	3			0	a				3	#
			2	b 			3	#			2	b 			6	9			1	3				5	@				
							4	k			4	k 							2	b 
							5	@			7	z 							4	k 
							6	9											6	9	
							7	z 											7	z
					
					
					
					
	
	predefined character classes  -
		
		1) \s - space character
		
		2) \S -	except space character
		
		3) \d -	any digit from 0 to 9 [0-9]
		
		4) \D -	except digit any character
		
		5) \w -	any word character [0-9a-zA-Z]
		
		6) \W - except word character [special character]
		
		7) .  - any character
		
		
			Example -
			
						Pattern p = Pattern.compiler("x");
						Matcher m = p.matcher("a7b k@9z");
						while(m.find())
						{
							System.out.println(m.start()+" "+ m.group());
						}
					
					
					
					
			X = \\s			X = \\S			x = \\d			x = \\D			x = \\w				x = \\W			x = .
			
			3				0	a			1	7 			0	a			0	a				3	#			0	a
							1	7			6	9 			2	b			1	7				5	@			1	7							
							2	b				 			3				2	b 								2	b
							4	k				 			4	k			4	k  								3	
							5	@							5	@			6	9								4	k 
							6	9 							7	z			7	z								5	@
							7	z																				6	9
																												7	z
																												
																												
																												
																												
																												
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Quantifiers  -
																														
		1) we can use Quantifiers to specify the number of occurrence to match 
			
			a 	- exactly one a
			a+	- atleast one a 
			a*	- any number of a including zero number
			a?	- atmost one a 
			
			
		Example -
			
						Pattern p = Pattern.compiler("x");
						Matcher m = p.matcher("abaabaaab");
						while(m.find())
						{
							System.out.println(m.start()+" "+ m.group());
						}
					
					
					
					
			X = a			X = +			x = a*			x = a?			
			
			0	a			0	a			0	a 			0	a			
			2	a			2	aa			1	 			1										
			3	a			5	aaa			2	aa			2	a				
			5	a							4	 			3	a			
			6	a							5	aaa			4				 
			7	a							8				5	a			
											9				6	a												
															7	a												
															8													
															9													
																												



------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Pattern class  -
										
		1) split()  -
				
				1) we can use Pattern class split() method to split the target String according to particular pattern 
				
					
					Pattern p = Pattern.compile("\\s");
					String[] s = p.split("Durga Software solutions");
					for(String s1 : s)
					{
						System.out.println(s1);
					}
					
					output -
							Durga
							Software
							solutions
					

					
							
					Pattern p = Pattern.compile("\\.");						// [.]
					String[] s = p.split("www.durgajobs.com");
					for(String s1 : s)
					{
						System.out.println(s1);
					}
					
					output -
							www
							durgajobs
							com		
							
							
							
							
							
		2) String class split()  -
				
				1) String class also contain split() method to split the target String according to a particular pattern 
				
					String s = "Durga Software solutions";
					String[] s1 = s.split("\\s");
					for(String s2 : s1)
					{
						System.out.println(s2);
					}		
							
							
					output -
							Durga
							Software
							solutions			
							
		Note -
			1) Pattern class split() method can take target String as argument where as String class split() method can take pattern as argument
			
			
							
							
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

StringTokenizer   -
		
		1) it is a special designed class for tokenization activity 
		2) StringTokenizer present in java.util package
		
			eg -
				StringTokenizer st = new StringTokenizer("Durga Software solutions");
				while(st.hasMoreTokens())
				{
					System.out.println(st.nextToken());
				}
							
			output	- 
			
					Durga
					Software
					solutions
					
		
		Note -
		
			1) the default Regular Expression for StringTokenizer is space 
							
							
			eg -
			
				StringTokenizer st = new StringTokenizer("21-09-2023", "-");		// (target String, RE / Pattern / Delim)
				while(st.hasMoreTokens())
				{
					System.out.println(st.nextToken());
				}
							
			output	- 
			
					21
					09
					2023				
							
							
							
							
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q 	write a Regular Expression to represent all valid 10 digit mobile numbers ?
								
		Rules -
			1) every number should contain 10 digit
			2) the first digit should be 7,8,9
			
				// 10 digit 
					[789][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]
							
					or
					[789][0-9]{9}
			
							
				// 10 digit  or 11 digit
				
					0?[789][0-9]{9}
							
							
				// 10 digit  or 11 digit or 12 digit
					
					(0|91)?[789][0-9]{9}			
							
							
							
							
							
Q 	write a Regular Expression to represent all valid email ids ?

		1) [a-zA-Z0-9][a-zA-Z0-9_.]*@[a-zA-Z0-9]+([.][a-zA-Z]+)+
		
		
				// only email ids  -
					
			[a-zA-Z0-9][a-zA-Z0-9_.]*@gmail[.]com
		


Q 	write a Regular Expression to represent all yava language identifiers ?

		Rules -
			1) allowed characters are a to z , A-Z, 0-9, #, $
			2) length of each identifier should atleast 2 
			3) the first character should be lowercase alphabet symbol for a to k
			4) second character should be digit divisible by 3 (0, 3,6,9)
			
			
			
			[a-k][0369][a-zA-Z0-9#$]*
			



---------------------------------------------------------------------------------------------------------------------------------------------------------------------

How to use Regular Expression

Q write a program to check the weather given number is a valid mobile or not ?


			import java.util.regex.*;
			
			class RegExpDemo
			{
				public static void main(String[] args)
				{
					Pattern p = Pattern.compile("(0|91)?[7-9][0-9]{9}");
					Matcher m = p.matcher(args[0]);
						
					if(m.find() && m.group.equals(args[0]))
					{
						System.out.println("valid mobile number");
					}
					else
					{
						System.out.println("Invalid mobile number");
					}
					
				}
			}

		output -
				javac RegExpDemo.java
				java RegExpDemo 3569856655323255
					Invalid mobile number
				
				java RegExpDemo 916985665532
					valid mobile number
				




Q write a program to check the weather given the email or not ?
		
		in the above program we have replace mobile number regular expression with mail id expression
			
			[a-zA-Z0-9][a-zA-Z0-9_.]*@[a-zA-Z0-9]+([.][a-zA-Z]+)+






Q write a program to read all mobile number present in the given input file where mobile number are mixed with normal text data ?

		import java.io.*;
		import java.util.regex.*;
			
			class MobileExtractor
			{
				public static void main(String[] args) throws Exception
				{
					PrintWriter pw = new PrintWriter("output.txt");
					
					Pattern p = Pattern.compile("(0|91)?[7-9][0-9]{9}");
					
					BufferedReader br = new BufferedReader(new FileReader("input.txt"));
					String line = br.readLine();
					
					while(line != null)
					{
						Matcher m = p.matcher(line);
						
						while(m.find())
						{
							System.out.println(m.group());
						}
						
						line = br.readLine();
					}
					pw.flush();
				}
			}

		output -
				9452255555
				9452285565
				9452255965


Q write a program to read all mail ids present in the given input file where mail ids are mixed with normal text data ?	

		in the above program we have replace mobile number regular expression with mail id expression
		
			[a-zA-Z0-9][a-zA-Z0-9_.]*@[a-zA-Z0-9]+([.][a-zA-Z]+)+
			
			
			
			
Q  write a program to display all .txt filenames present in c:\\DurgaClasses


			import java.io.*;
			import java.util.regex.*;
			
			class FileNameExtractor
			{
				public static void main(String[] args) throws Exception
				{
					int count = 0;
					
					Pattern p = Pattern.compile("[a-zA-Z0-9_$.]+[.]txt");					//(txt | class | java)
					
					File f = new File("c:\\DurgaClasses");
					String[] s =f.list();
					
					for(String s1 : s)
					{
						Matcher m = p.matcher(s1);
						
						if(m.find() && m.group().equals(s1))
						{
							count++;
							System.out.println(s1);
						}
					}
					System.out.println(count);
				}
			}

		output -
				Number.txt
				Byte.txt
				2
				
			