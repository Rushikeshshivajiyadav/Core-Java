Internationalization (I18N)  -
		
				
		1) the process of desiging web application in such way that which provides support for various country and various languages and various currency automatically without 
			performing any change in the application, is called Internationalization(I18N)
		
		2) if the request is coming from India then the response should be India people understadable form and if the request is coming from US then the response should be US
			people understadable form 
			
		3) we can implement Internationalization by using the following 3 classes 
				
				1) Locale
				2) NumberFormat
				3) DateFormat
				
		

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

1) Locale   -
		
		1) a Locale Object represent a Grographic location(Country), language or both 
			eg  -
				we can create a Locale Object to represent India
				we can create a Locale Object to represent English language
				
		2) Locale class present in java.util package
		
		3) it is a final class and it is direct child class of Object 
		
		4) it implements Serializable and Cloneble interface 
		
		
	javap java.util.Locale			// see all information about Locale class

	
	Constructors  -
		
		1) Locale l = new Locale(String language);
		
		2) Locale l = new Locale(String language, String country);
		
			eg -
				Locale l = new Locale("pa", "IN");						// pa - panjabi  	IN - India
					
		

	1) Locale class already define some constant to represent some standard Locale we can use this constant directly 
	
			eg -
				Locale.UK
				Locale.US
				Locale.ITALY
				Locale.ENGLISH
				
				

important methods of Locale class  -
	
		1) public static Locale getDefault();
		2) public static void setDefault(Locale l);
		3) public String getCountry();						// US
		4) public String getLanguage();						// en
		5) public String getDisplayCountry();						// United States
		6) public String getDisplayLanguage();						// english
		7) public static String[] getISOLanguages();
		8) public static String[] getISOCountries();
		9)  public static Locale[] getAvailableLocales();
		
		
		
		
	Example -
			
			import java.util.*;
			
			class LocaleDemo
			{
				public static void main(String[] args)
				{
					Locale l1 = Locale.getDefault();
					System.out.println(l1.getCountry()+ "..." + l1.getLanguage());
					System.out.println(l1.getDisplayCountry()+ "..." + l1.getDisplayLanguage());
					
					
					Locale l2 = new Locale("pa", "IN");
					Locale.setDefault(l2);
					System.out.println(Locale.getDefault().getDisplayLanguage());
					
					String[] s3 = Locale.getISOLanguages();
					for( String s4 : s3)
					{
						System.out.println(s4);
					}
					
					
					String[] s4 = Locale.getISOCountries();
					for( String s5 : s4)
					{
						System.out.println(s5);
					}
					
					
					Locale[] s = Locale.getAvailableLocales();
					for( Locale s1 : s)
					{
						System.out.println(s1.getDisplayCountry() + "  " + s1.getDisplayLanguage());
					}
				}
			}
			
			
			
			
------------------------------------------------------------------------------------------------------------------------------------------------------------------

NumberFormat  -
					
		1) various location follow various styles to represent a java number 
			eg -
				
				double d = 123456. 789;
				
				IN : 1,23,456.789
				US : 123,456.789
				ITALY :123.456,789
				
				
		2) we can use NumberFormat class to format a java number according to a particular Locale
		
		3) NumberFormat class present in java.text package and it is abstract class
		
			NumberFormat nf = new NumberFormat();			// invalid 
		
		4) getting NumberFormat Object for Default Locale 
		
		5) NumberFormat class define the following methods for this purpose 
				
				public static NumberFormat getInstance();
				public static NumberFormat getCurrencyInstance();
				public static NumberFormat getPercentInstance();
				public static NumberFormat getNumberInstance();
			
		
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

getting NumberFormat Object for specific Locale -
			
		1) the above methods are same but we have to pass Locale the corresponding Locale class Object as argument

			public static NumberFormat getNumberInstance(Locale l);
			
		2) once we got NumberFormat Object we can call format and parse methods on that Object
				
				public String format(long l);
				public String format(double d);
						-
							to convert java number form to Locale specific String form 
							
				public Number parse(String s) throws ParseException 
						-
							to convert Locale specific String form to java number form 
							
							
						
											format()										parse()
						java Number			-----> 			Locale specific String form  	------>			Java Number
			
	

	
			
	Q . write a program to display a java number in ITALY specific form 
			
			
			
				import java.util.*;
				import.java.text.*;
				
				class NumberFormatDemo
				{
					public static void main(String[] args)
					{
						double d = 123456.789;
						NumberFormat nf = NumberFormat.getInstance(Locale.ITALY);
						System.out.println("Italy Form is ..." + nf.format(d));					// 123.456,789
					}
				}
			
			
			
	Q . write a program to display a java number in UK, US and India currency forms
	
				
				import java.util.*;
				import.java.text.*;
				
				class NumberFormatDemo
				{
					public static void main(String[] args)
					{
						double d = 123456.789;
						
						Locale India = new Locale("pa", "IN");
						
						NumberFormat nf = NumberFormat.getCurrencyInstance(India);
						System.out.println("India Form is ..." + nf.format(d));					// India Form is ... INR 123,456.79
						
						NumberFormat nf1 = NumberFormat.getCurrencyInstance(Locale.US);
						System.out.println("US Form is ..." + nf1.format(d));					// US Form is ... $123,456.79
						
						NumberFormat nf2 = NumberFormat.getCurrencyInstance(Locale.UK);
						System.out.println("UK Form is ..." + nf2.format(d));					// UK Form is ... u123,456.79
					}
				}
			
			
			
			
			
	Setting Maximum and Minimum Fraction and Integer digits -
	
		1) NumberFormat class define the following methods for this purpose	
			
				public void setMaximumFractionDigits(int n);
				public void setMinimumFractionDigits(int n);
				public void setMaximumIntegerDigits(int n);
				public void setMinimumIntegerDigits(int n);
		
				
			
				123456.789		<--- Fraction digits
					|
				Integer 
				digits
			
			
			
	Example -
				
				NumberFormat nf = NumberFormat.getInstance();
				
				case : 1
					nf.setMaximumFractionDigits(2);
					System.out.println(nf.format(123.4567));			// 123.45
					System.out.println(nf.format(123.4));				// 123.4
			
			
				case : 2
					nf.setMinimumFractionDigits(2);
					System.out.println(nf.format(123.4567));			// 123.4567
					System.out.println(nf.format(123.4));				// 123.40
			
			
				case : 3
					nf.setMaximumIntegerDigits(3);
					System.out.println(nf.format(123456.789));			// 456.789
					System.out.println(nf.format(1.2345));				// 1.2345
			
			
				case : 3
					nf.setMinimumIntegerDigits(3);
					System.out.println(nf.format(123456.789));			// 123,456.789
					System.out.println(nf.format(1.2345));				// 001.2345
			
			
			
			
			
			
			
---------------------------------------------------------------------------------------------------------------------------------------------------------------

DateFormat    -

		1) 
			
			